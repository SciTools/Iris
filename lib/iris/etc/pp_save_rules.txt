



IF
    scalar_coord(cm, 'time') is not None
    scalar_coord(cm, 'time').has_bounds()
    scalar_coord(cm, 'time').units.num2date(scalar_coord(cm, 'time').bounds[0,0]).year == scalar_coord(cm, 'time').units.num2date(scalar_coord(cm, 'time').bounds[0,1]).year
    scalar_coord(cm, 'forecast_period') is not None
    scalar_coord(cm, 'forecast_period').has_bounds()
    scalar_coord(cm, 'clim_season') is not None
    'clim_season' in cm.cell_methods[-1].coord_names
THEN
    pp.lbtim.ia = 0
    pp.lbtim.ib = 2
    pp.t1 = scalar_coord(cm, 'time').units.num2date(scalar_coord(cm, 'time').bounds[0, 0])
    pp.t2 = scalar_coord(cm, 'time').units.num2date(scalar_coord(cm, 'time').bounds[0, 1])
    pp.lbft = scalar_coord(cm, 'forecast_period').units.convert(scalar_coord(cm, 'forecast_period').bounds[0, 1], 'hours')



IF
    scalar_coord(cm, 'time') is not None
    scalar_coord(cm, 'time').has_bounds()
    scalar_coord(cm, 'time').units.num2date(scalar_coord(cm, 'time').bounds[0,0]).year != scalar_coord(cm, 'time').units.num2date(scalar_coord(cm, 'time').bounds[0,1]).year
    scalar_coord(cm, 'forecast_period') is not None
    scalar_coord(cm, 'forecast_period').has_bounds()
    scalar_coord(cm, 'clim_season') is not None
    'clim_season' in cm.cell_methods[-1].coord_names
    scalar_coord(cm, 'clim_season').points[0] == 'djf'
THEN
    pp.lbtim.ia = 0
    pp.lbtim.ib = 3

    pp.t1 = scalar_coord(cm, 'time').units.num2date(scalar_coord(cm, 'time').bounds[0,0])
    pp.t2 = scalar_coord(cm, 'time').units.num2date(scalar_coord(cm, 'time').bounds[0,1])

    pp.t1 = netcdftime.datetime( pp.t1.year if pp.t1.month==12 else pp.t1.year-1, 12, 1, 0, 0, 0 )
    pp.t2 = netcdftime.datetime( pp.t2.year, 3, 1, 0, 0, 0 )
        
    self.conditional_warning(scalar_coord(cm, 'time').bounds[0,0] != scalar_coord(cm, 'time').units.date2num(pp.t1), "modified t1 for climatological seasonal mean")
    self.conditional_warning(scalar_coord(cm, 'time').bounds[0,1] != scalar_coord(cm, 'time').units.date2num(pp.t2), "modified t2 for climatological seasonal mean")

    pp.lbft = scalar_coord(cm, 'forecast_period').units.convert(scalar_coord(cm, 'forecast_period').bounds[0, 1], 'hours')

#climatiological time mean - spanning years - mam
IF
    scalar_coord(cm, 'time') is not None
    scalar_coord(cm, 'time').has_bounds()
    scalar_coord(cm, 'time').units.num2date(scalar_coord(cm, 'time').bounds[0,0]).year != scalar_coord(cm, 'time').units.num2date(scalar_coord(cm, 'time').bounds[0,1]).year
    scalar_coord(cm, 'forecast_period') is not None
    scalar_coord(cm, 'forecast_period').has_bounds()
    scalar_coord(cm, 'clim_season') is not None
    'clim_season' in cm.cell_methods[-1].coord_names
    scalar_coord(cm, 'clim_season').points[0] == 'mam'
THEN
    pp.lbtim.ia = 0
    pp.lbtim.ib = 3

    pp.t1 = scalar_coord(cm, 'time').units.num2date(scalar_coord(cm, 'time').bounds[0,0])
    pp.t2 = scalar_coord(cm, 'time').units.num2date(scalar_coord(cm, 'time').bounds[0,1])

    pp.t1 = netcdftime.datetime( pp.t1.year, 3, 1, 0, 0, 0 )
    pp.t2 = netcdftime.datetime( pp.t2.year, 6, 1, 0, 0, 0 )
    
    self.conditional_warning(scalar_coord(cm, 'time').bounds[0,0] != scalar_coord(cm, 'time').units.date2num(pp.t1), "modified t1 for climatological seasonal mean")
    self.conditional_warning(scalar_coord(cm, 'time').bounds[0,1] != scalar_coord(cm, 'time').units.date2num(pp.t2), "modified t2 for climatological seasonal mean")

    pp.lbft = scalar_coord(cm, 'forecast_period').units.convert(scalar_coord(cm, 'forecast_period').bounds[0, 1], 'hours')

#climatiological time mean - spanning years - jja
IF
    scalar_coord(cm, 'time') is not None
    scalar_coord(cm, 'time').has_bounds()
    scalar_coord(cm, 'time').units.num2date(scalar_coord(cm, 'time').bounds[0,0]).year != scalar_coord(cm, 'time').units.num2date(scalar_coord(cm, 'time').bounds[0,1]).year
    scalar_coord(cm, 'forecast_period') is not None
    scalar_coord(cm, 'forecast_period').has_bounds()
    scalar_coord(cm, 'clim_season') is not None
    'clim_season' in cm.cell_methods[-1].coord_names
    scalar_coord(cm, 'clim_season').points[0] == 'jja'
THEN
    pp.lbtim.ia = 0
    pp.lbtim.ib = 3

    pp.t1 = scalar_coord(cm, 'time').units.num2date(scalar_coord(cm, 'time').bounds[0,0])
    pp.t2 = scalar_coord(cm, 'time').units.num2date(scalar_coord(cm, 'time').bounds[0,1])

    pp.t1 = netcdftime.datetime( pp.t1.year, 6, 1, 0, 0, 0 )
    pp.t2 = netcdftime.datetime( pp.t2.year, 9, 1, 0, 0, 0 )
    
    self.conditional_warning(scalar_coord(cm, 'time').bounds[0,0] != scalar_coord(cm, 'time').units.date2num(pp.t1), "modified t1 for climatological seasonal mean")
    self.conditional_warning(scalar_coord(cm, 'time').bounds[0,1] != scalar_coord(cm, 'time').units.date2num(pp.t2), "modified t2 for climatological seasonal mean")

    pp.lbft = scalar_coord(cm, 'forecast_period').units.convert(scalar_coord(cm, 'forecast_period').bounds[0, 1], 'hours')

#climatiological time mean - spanning years - son
IF
    scalar_coord(cm, 'time') is not None
    scalar_coord(cm, 'time').has_bounds()
    scalar_coord(cm, 'time').units.num2date(scalar_coord(cm, 'time').bounds[0,0]).year != scalar_coord(cm, 'time').units.num2date(scalar_coord(cm, 'time').bounds[0,1]).year
    scalar_coord(cm, 'forecast_period') is not None
    scalar_coord(cm, 'forecast_period').has_bounds()
    scalar_coord(cm, 'clim_season') is not None
    'clim_season' in cm.cell_methods[-1].coord_names
    scalar_coord(cm, 'clim_season').points[0] == 'son'
THEN
    pp.lbtim.ia = 0
    pp.lbtim.ib = 3

    pp.t1 = scalar_coord(cm, 'time').units.num2date(scalar_coord(cm, 'time').bounds[0,0])
    pp.t2 = scalar_coord(cm, 'time').units.num2date(scalar_coord(cm, 'time').bounds[0,1])

    pp.t1 = netcdftime.datetime( pp.t1.year, 9, 1, 0, 0, 0 )
    pp.t2 = netcdftime.datetime( pp.t2.year, 12, 1, 0, 0, 0 )
    
    self.conditional_warning(scalar_coord(cm, 'time').bounds[0,0] != scalar_coord(cm, 'time').units.date2num(pp.t1), "modified t1 for climatological seasonal mean")
    self.conditional_warning(scalar_coord(cm, 'time').bounds[0,1] != scalar_coord(cm, 'time').units.date2num(pp.t2), "modified t2 for climatological seasonal mean")

    pp.lbft = scalar_coord(cm, 'forecast_period').units.convert(scalar_coord(cm, 'forecast_period').bounds[0, 1], 'hours')
    pp.lbproc += 8192
