# (C) British Crown Copyright 2010 - 2013, Met Office
#
# This file is part of Iris.
#
# Iris is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the
# Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Iris is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Iris.  If not, see <http://www.gnu.org/licenses/>.
"""
A script to convert the standard names information from the provided XML
file into a Python dictionary format.

Takes one arguments: the XML file to process

Iris will use a source XML file, as obtained from:
    http://cf-pcmdi.llnl.gov/documents/cf-standard-names

"""

import argparse
from datetime import datetime
import os
import pprint
import xml.etree.ElementTree as ET


STD_VALUES_FILE_TEMPLATE = '''
# (C) British Crown Copyright 2010 - {year}, Met Office
#
# This file is part of Iris.
#
# Iris is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the
# Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Iris is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Iris.  If not, see <http://www.gnu.org/licenses/>.
"""
This file contains a dictionary of standard value names that are mapped
to another dictionary of other standard name attributes. Currently only
the `canonical_unit` exists in these attribute dictionaries.

This file is automatically generated. Do not edit this file by hand.

The file can be re-generated in the source distribution via:
    python generate_std_names.py XML_FILE

Or, the standard names dictionary can be updated in session, by
    import iris.semantics.std_names as std_names
    import iris.semantics.generate_std_names as gen_std_names
    std_names.STD_NAMES = gen_std_names.to_dict(XML_FILE)

"""


STD_NAMES = '''.lstrip().format(year=datetime.utcnow().year)


def process_name_table(tree, element_name, *child_elements):
    """
    Yields a series of dictionaries with the key being the id of the
    entry element and the value containing another dictionary mapping
    other attributes of the standard name to their values, e.g. units,
    description, grib value etc.
    """
    for elem in tree.iterfind(element_name):
        sub_section = {}

        for child_elem in child_elements:
            found_elem = elem.find(child_elem)
            etext = found_elem.text if found_elem is not None else None
            sub_section[child_elem] = etext

        yield {elem.get("id"): sub_section}


def to_dict(infile):
    """
    Returns a dictionary with CF standard names as keys and values in
    the form {'canonical_units': <units>}
    """
    values = {}
    aliases = {}

    tree = ET.parse(infile)

    for section in process_name_table(tree, 'entry', 'canonical_units'):
        values.update(section)

    for section in process_name_table(tree, 'alias', 'entry_id'):
        aliases.update(section)

    for key, valued in aliases.iteritems():
        canon = values.get(valued['entry_id']).get('canonical_units')
        values.update({key: {'canonical_units': canon}})
    return values


def to_file(infile, outfile):
    """
    Writes the dictionary of values from the XML infile to the outfile
    """
    values = to_dict(infile)
    outfile.write(STD_VALUES_FILE_TEMPLATE + pprint.pformat(values))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Create Python code from CF standard name XML.')
    parser.add_argument('input', type=argparse.FileType(),
                        metavar='INPUT',
                        help='Path to CF standard name XML')
    outfilepath = os.path.join(os.path.dirname(__file__), 'std_names.py')
    args = parser.parse_args()
    with open(outfilepath, 'w') as outfile:
        to_file(args.input, outfile)
