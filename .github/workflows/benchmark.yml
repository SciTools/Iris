# This is a basic workflow to help you get started with Actions

name: benchmark-check

on:
  push:
    branches:
      - overnight_benchmarks

jobs:
  benchmark:
    runs-on: ubuntu-latest

    env:
      IRIS_TEST_DATA_LOC_PATH: benchmarks
      IRIS_TEST_DATA_PATH: benchmarks/iris-test-data
      IRIS_TEST_DATA_VERSION: "2.5"
      # Lets us manually bump the cache to rebuild
      TEST_DATA_CACHE_BUILD: "2"

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Nox
        run: |
          pip install nox

      - name: Cache .nox and .asv/env directories
        id: cache-env-dir
        uses: actions/cache@v2
        with:
          path: |
            .nox
            benchmarks/.asv/env
          # Make sure GHA never gets an exact cache match by using the unique
          #  github.sha. This means it will always store this run as a new
          #  cache (Nox may have made relevant changes during run). Cache
          #  restoration still succeeds via the partial restore-key match.
          key: ${{ runner.os }}-${{ github.sha }}
          restore-keys: ${{ runner.os }}

      - name: Cache test data directory
        id: cache-test-data
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.IRIS_TEST_DATA_PATH }}
          key:
            test-data-${{ env.IRIS_TEST_DATA_VERSION }}-${{ env.TEST_DATA_CACHE_BUILD }}

      - name: Fetch the test data
        if: steps.cache-test-data.outputs.cache-hit != 'true'
        run: |
          wget --quiet https://github.com/SciTools/iris-test-data/archive/v${IRIS_TEST_DATA_VERSION}.zip -O iris-test-data.zip
          unzip -q iris-test-data.zip
          mkdir --parents ${GITHUB_WORKSPACE}/${IRIS_TEST_DATA_LOC_PATH}
          mv iris-test-data-${IRIS_TEST_DATA_VERSION} ${GITHUB_WORKSPACE}/${IRIS_TEST_DATA_PATH}

      - name: Set test data var
        run: |
          echo "OVERRIDE_TEST_DATA_REPOSITORY=${GITHUB_WORKSPACE}/${IRIS_TEST_DATA_PATH}/test_data" >> $GITHUB_ENV

      - name: Run overnight benchmarks
        run: |
          first_commit=c50480b94594a563c7f35fa0769b20400c2b49eb
          nox --session="benchmarks(overnight)" -- $first_commit --quick --bench=aux_factory --no-interleave-rounds

      - name: Create issues for performance shifts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -d benchmarks/.asv/performance-shifts ]
          then
            cd benchmarks/.asv/performance-shifts
            for commit_file in *
            do
              pr_number=$(git log 8404ff64^! --oneline | grep -o "#[0-9]*" | cut -c 2-)
              author=$(gh pr view $pr_number --json author -q '.["author"]["login"]' --repo SciTools/iris)
              issue_title="Performance Shift(s): $commit_file"
              issue_body="
              Benchmark comparison has identified performance shifts at commit
              $commit_file (#$pr_number). Please review the report below and
              take corrective/congratulatory action as appropriate
              :slightly_smiling_face:
              \n
              \n<details>
              \n<summary>Performance shift report</summary>
              \n
              \n```
              \n$(cat $commit_file)
              \n```
              \n
              \n</details>
              \n
              \nGenerated by GHA run [`${{github.run_id}}`](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})
              "
              gh issue create --title $issue_title --body $issue_body --assignee $author --label "Bot" --label "Type: Performance" --repo $GITHUB_REPOSITORY
            done
          fi

      - name: Archive asv results
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: asv-report
          path: |
            benchmarks/.asv/results
