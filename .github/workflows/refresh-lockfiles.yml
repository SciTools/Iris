# This is a basic workflow to help you get started with Actions

name: Refresh Lockfiles

# Controls when the action will run. 
on:
#   schedule:
#     - cron: 1 0 * * 6

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
  push:
    branches: [ ci-lock ]

# # jobs:
# #   job1:
# #     runs-on: ubuntu-latest
# #     outputs:
# #       matrix: ${{ steps.set-matrix.outputs.matrix }}
# #     steps:
# #     - id: set-matrix
# #       run: echo "::set-output name=matrix::{\"include\":[{\"project\":\"foo\",\"config\":\"Debug\"},{\"project\":\"bar\",\"config\":\"Release\"}]}"
# #   job2:
# #     needs: job1
# #     runs-on: ubuntu-latest
# #     strategy:
# #       matrix: ${{fromJson(needs.job1.outputs.matrix)}}
# #     steps:
# #     - run: build

# # A workflow run is made up of one or more jobs that can run sequentially or in parallel
# jobs:
#   # find the list of python yaml files to lock
#   gen_matrix:
#     runs-on: ubuntu-latest
#     outputs:
#       matrix: ${{ steps.set-matrix.outputs.matrix }}
#     steps:
#       - uses: actions/checkout@v2
#       - id: set-matrix
#       - run: echo "::set-output name=matrix::$(python -c \"import glob; print(glob.glob('requirements/ci/py*.yml'))\")"
  
#   gen_lockfiles:
#     needs: [gen_matrix]
#     runs-on: ubuntu-latest
#     strategy:
#       matrix: ${{fromJson(needs.gen_matrix.outputs.matrix)}}
#     steps:
#       - run: echo 
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python: ['36', '37', '38']
    
    steps:
      - uses: actions/checkout@v2
      - name: install conda-lock
        run: |
          source $CONDA/bin/activate base
          conda install -y -c conda-forge conda-lock
      - name: generate lockfile
        run: |
          $CONDA/bin/conda-lock lock -p linux-64 -f requirements/ci/py${{matrix.python}}.yml
          mv conda-linux-64.lock py${{matrix.python}}-linux-64.lock
      - name: output lockfile
        uses: actions/upload-artifact@v2
        with:
          path: nox.lock/py${{matrix.python}}-linux-64.lock
    
  pr:
    runs-on: ubuntu-latest
    
    needs: build
    
    steps:
      - uses: actions/checkout@v2
      - name: get artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: create pr
        run: ls artifacts/*/*
        
        

#       # Runs a single command using the runners shell
#       - name: Run a one-line script
#         run: echo Hello, world!

#       # Runs a set of commands using the runners shell
#       - name: Run a multi-line script
#         run: |
#           echo Add other actions to build,
#           echo test, and deploy your project.
