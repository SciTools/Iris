What's new in Iris 1.7
**********************

:Release: 1.7.0
:Date: XXX

Iris 1.7 features
=================

.. _showcase:

.. admonition:: Showcase: Iris is making use of Biggus 

    Iris is now making extensive use of Biggus for virtual arrays and lazy
    array evaluation. In practice this means that analyses of cubes with data
    bigger than the system's available memory are now possible.

    Other than the improved functionality the changes are mostly
    transparent; for example, before the introduction of biggus, MemoryErrors
    were likely for very large datasets::

        >>> result = extremely_large_cube.collapsed('time', iris.analyis.MEAN)
        MemoryError

    Now, for supported operations, the evaluation is lazy (i.e. it doesn't take
    place until the actual data is subsequently requested) and can handle data
    larger than available system memory::

        >>> result = extremely_large_cube.collapsed('time', iris.analyis.MEAN)
        >>> print type(result)
        <class 'iris.cube.Cube'>

    Memory is still a limiting factor if ever the data is desired as a numpy array
    (e.g. via :data:`cube.data <iris.cube.Cube.data>`), but additional methods have
    been added to the Cube to support querying and subsequently accessing the "lazy"
    data form (see :meth:`~iris.cube.Cube.has_lazy_data` and
    :meth:`~iris.cube.Cube.lazy_data`).


.. admonition:: Showcase: New interpolation and regridding API

    New interpolation and regridding interfaces have been added which simplify and
    extend the existing functionality.

    The interfaces are exposed on the cube in the form of the
    :meth:`~iris.cube.Cube.interpolate` and :meth:`~iris.cube.Cube.regrid` methods.
    Conceptually the signatures of the methods are::

        interpolated_cube = cube.interpolate(interpolation_points, interpolation_scheme)

    and::

        regridded_cube = cube.regird(target_grid_cube, regridding_scheme)

    Whilst not all schemes have been migrated to the new interface,
    :class:`iris.analysis.Linear` defines both linear interpolation and regridding,
    and :class:`iris.analysis.AreaWeighted` defines an area weighted regridding
    scheme.

.. admonition:: Showcase: Cube broadcasting

    When doing mathematical operations, cubes now follow similar rules to the
    broadcasting of numpy arrays, with extra coordinate aware context providing
    some enhanced functionality beyond the basic broadcasting behaviour of numpy.

    For instance, it is now possible to subtract a processed cube from the original
    to the mean deviation::

        >>> time_mean = original_cube.collapsed('time', iris.analysis.MEAN)
        >>> mean_deviation = original_cube - time_mean


* Deferred GRIB data loading has been introduced for reduced memory consumption when
  loading GRIB files.
* Linear interpolation and regridding now make use of SciPy's RegularGridInterpolator
  for much faster linear interpolation.
* NAME file loading now handles the "no time averaging" column and translates
  height/altitude above ground/sea-level columns into appropriate coordinate metadata.
* The NetCDF saver has been extended to allow saving of cubes with hybrid pressure
  auxiliary factories.
* PP/FF loading supports LBLEV of 9999.
* Extended GRIB1 loading to support data on hybrid pressure levels.
* :func:`iris.coord_categorisation.add_day_of_year` can be used to add categorised
  day of year coordinates based on time coordinates with non-Gregorian calendars.
* Support for loading data on reduced grids from GRIB files in raw form without
  automatically interpolating to a regular grid.
* The coordinate systems :class:`iris.coord_systems.Orthographic` and
  :class:`iris.coord_systems.VerticalPerspective` (for imagery from geostationary
  satellites) have been added.
* Extended NetCDF loading to support the "ocean sigma over z" auxiliary coordinate
  factory.
* Support added for loading CF-NetCDF data with bounds arrays that are missing a
  vertex dimension.
* :meth:`iris.cube.Cube.rolling_window` can now be used with string-based AuxCoordinates.
* Loading of PP and FF files has been optimised through deferring creation of
  PPField attributes.
* Automatic association of a coordinate's CF formula terms variable with the
  data variable associated with that coordinate.
* PP loading translates cross-section height into a dimensional auxiliary coordinate.
* String auxiliary coordinates can now be plotted with the Iris plotting wrappers.
* :func:`iris.analysis.geometry.geometry_area_weights` now allows for the calculation of
  normalized cell weights.
* Many new translations between the CF spec and STASH codes or GRIB2 parameter codes.
* PP save rules add the data's UM Version to the attributes of the  saved file
  when appropriate.
* NetCDF reference surface variable promotion available through the
  :class:`iris.FUTURE` mechanism.
* A speed improvement in calculation of :func:`iris.analysis.geometry.geometry_area_weights`.
* The mdtol keyword was added to area-weighted regridding to allow control of the tolerance
  for missing data.
* Handling for patching of the CF conventions global attribute via a defined
  cf_patch_conventions function.
* Concatenate reporting that raises a descriptive error if the concatenation
  process fails.

Bugs fixed
==========
* Data containing more than one reference cube for constructing hybrid height
  coordinates can now be loaded.
* Removed cause of increased margin of error when interpolating.
* Changed floating-point precision used when wrapping points for interpolation.
* Mappables that can be used to generate colorbars are now returned by Iris
  plotting wrappers.
* NetCDF load ignores over-specified formula terms on bounded dimensionless vertical
  coordinates.
* Auxiliary coordinate factory loading now correctly interprets formula term
  varibles for "atmosphere hybrid sigma pressure" coordinate data.
* Corrected comparison of NumPy NaN values in cube merge process.
* Fixes for :meth:`iris.Cube.intersection` to correct calculating the intersection
  of a cube with split bounds, handling of circular coordinates, and for finding
  a wrapped two-point result.
* A bug affecting :meth:`iris.cube.Cube.extract` and :meth:`iris.cube.CubeList.extract`
  that led to unexpected behaviour when operating on scalar cubes has been fixed.

Incompatible changes
====================
* Saving a cube with a STASH attribute to NetCDF now produces a variable
  with an attribute of "um_stash_source" rather than "ukmo__um_stash_source".
* Cubes save to NetCDF with a coordinate system referencing a spherical ellipsoid
  now result in the grid mapping variable containing only the "earth_radius" attribute,
  rather than the "semi_major_axis" and "semi_minor_axis".
* Collapsing a cube over all of its dimensions now results in a scalar cube rather
  than a 1d cube.

Deprecations
============
* :func:`iris.util.ensure_array` has been deprecated.

Documentation Changes
=====================
* An example demonstrating custom log-scale colouring has been added.
  See :ref:`graphics-anomaly_log_colouring`.
* An example demonstrating the creation of a custom
  :class:`iris.analysis.Aggregator` has been added.
  See :ref:`graphics-custom_aggregation`.
* An example of reprojecting data from 2D auxiliary spatial coordinates
  (such as that from the ORCA grid) has been added. See :ref:`graphics-orca_projection`.
* A new :doc:`"whitepapers" </whitepapers/index>` section has been added to the documentation along
  with the addition of a paper providing an :doc:`overview of the load process for UM-like
  fileformats (e.g. PP and Fieldsfile) </whitepapers/um_files_loading>`.

